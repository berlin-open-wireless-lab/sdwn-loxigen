// Copyright 2013, Big Switch Networks, Inc.
//
// LoxiGen is licensed under the Eclipse Public License, version 1.0 (EPL), with
// the following special exception:
//
// LOXI Exception
//
// As a special exception to the terms of the EPL, you may distribute libraries
// generated by LoxiGen (LoxiGen Libraries) under the terms of your choice, provided
// that copyright and licensing notices generated by LoxiGen are not altered or removed
// from the LoxiGen Libraries and the notice provided below is (i) included in
// the LoxiGen Libraries, if distributed in source code form and (ii) included in any
// documentation for the LoxiGen Libraries, if distributed in binary form.
//
// Notice: "Copyright 2013, Big Switch Networks, Inc. This library was generated by the LoxiGen Compiler."
//
// You may not use this file except in compliance with the EPL or LOXI Exception. You may obtain
// a copy of the EPL at:
//
// http://www.eclipse.org/legal/epl-v10.html
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// EPL for the specific language governing permissions and limitations
// under the EPL.

#version 4

struct of_wifi_add_sta : of_wifi_header {
    uint8_t version;
    uint8_t type == 4;
    uint16_t length;
    uint32_t xid;
    uint32_t experimenter == 0x421337;
    uint32_t subtype == 1;
    of_mac_addr_t sta;
    of_mac_addr_t ap;
    uint16_t capabilities;
    uint16_t aid;
    of_desc_str_t supported_rates;
    of_desc_str_t ht_capabilities;
    list(of_bsn_tlv_data_t) keys;
};

struct of_wifi_del_sta : of_wifi_header {
    uint8_t version;
    uint8_t type == 4;
    uint16_t length;
    uint32_t xid;
    uint32_t experimenter == 0x421337;
    uint32_t subtype == 4;
    of_mac_addr_t sta;
    of_mac_addr_t ap;
};

struct of_wifi_packet_in : of_wifi_header {
    uint8_t version;
    uint8_t type == 4;
    uint16_t length;
    uint32_t xid;
    uint32_t experimenter == 0x421337;
    uint32_t subtype == 2;
    uint8_t hdr_version_type;
    uint8_t hdr_flags;
    uint16_t hdr_duration;
    of_mac_addr_t hdr_addr1;
    of_mac_addr_t hdr_addr2;
    of_mac_addr_t hdr_addr3;
    uint16_t hdr_seq_ctrl;
    of_mac_addr_t hdr_addr4;
    of_octets_t frame;
};

struct of_wifi_add_vlap : of_wifi_header {
    uint8_t version;
    uint8_t type == 4;
    uint16_t length;
    uint32_t xid;
    uint32_t experimenter == 0x421337;
    uint32_t subtype == 3;
    of_mac_addr_t bssid;
    of_octets_t beacon;
};

struct of_wifi_del_vlap : of_wifi_header {
    uint8_t version;
    uint8_t type == 4;
    uint16_t length;
    uint32_t xid;
    uint32_t experimenter == 0x421337;
    uint32_t subtype == 5;
    of_mac_addr_t bssid;
};

struct of_wifi_get_remote_port_request : of_wifi_header {
    uint8_t version;
    uint8_t type == 4;
    uint16_t length;
    uint32_t xid;
    uint32_t experimenter == 0x421337;
    uint32_t subtype == 6;
};

struct of_wifi_get_remote_port_reply : of_wifi_header {
    uint8_t version;
    uint8_t type == 4;
    uint16_t length;
    uint32_t xid;
    uint32_t experimenter == 0x421337;
    uint32_t subtype == 7;
    of_port_no_t port;
};

struct of_wifi_get_stas_request : of_wifi_stats_request {
    uint8_t version;
    uint8_t type == 18;
    uint16_t length;
    uint32_t xid;
    uint16_t stats_type == 0xffff;
    enum ofp_stats_request_flags flags;
    pad(4);
    uint32_t experimenter == 0x421337;
    uint32_t subtype == 1;
    of_mac_addr_t bssid;
};

struct of_wifi_get_stas_reply : of_wifi_stats_reply {
    uint8_t version;
    uint8_t type == 19;
    uint16_t length;
    uint32_t xid;
    uint16_t stats_type == 0xffff;
    enum ofp_stats_reply_flags flags;
    pad(4);
    uint32_t experimenter == 0x421337;
    uint32_t subtype == 1;
    list(of_wifi_stas_entry_t) stas;
};

struct of_wifi_stas_entry {
    uint16_t length;
    of_mac_addr_t mac;
    uint16_t capabilities;
    uint16_t aid;
    of_desc_str_t supported_rates;
    of_desc_str_t ht_capabilities;
    list(of_bsn_tlv_data_t) keys;
};
